using Humanizer;
using Microsoft.AspNetCore.Mvc;
using Microsoft.CodeAnalysis.Scripting;
using Microsoft.Data.SqlClient;
using NuGet.Protocol.Plugins;
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Model;
using System.Runtime.InteropServices;
using System.Xml.Linq;


namespace CauseLink.Models
{
    public class details
    {

        SqlConnection con = new SqlConnection(@"Data Source=(LocalDB)\MSSQLLocalDB;Initial Catalog=CauseLink;Integrated Security=True;Connect Timeout=30;Encrypt=False;");
        /*       SqlConnection conn = new SqlConnection(
         "Data Source=(localdb)\\MSSQLLocalDB;" +
         "Initial Catalog=MyAppDB;" +
         "Integrated Security=SSPI;";
       conn.Open(); */
        public int Id { get; set; }

        [Required(ErrorMessage = "Please enter email")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Please enter phone")]
        public int Phone { get; set; }

        [Required(ErrorMessage = "Please enter address")]
        public string Address { get; set; }

        [Required(ErrorMessage = "Please enter about")]
        public string About { get; set; }

        [Required(ErrorMessage = "Please enter about")]
        public string Image { get; set; }


        public List<details> getData()
        {
            List<details> lstEmp = new List<details>();
            SqlDataAdapter apt = new SqlDataAdapter("select * from details", con);
            DataSet ds = new DataSet();
            apt.Fill(ds);
            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                lstEmp.Add(new details
                {
                    Id = Convert.ToInt32(dr["Id"].ToString()),
                    Email = dr["Email"].ToString(),
                    Phone = Convert.ToInt32(dr["Phone"].ToString()),
                    Address = dr["Address"].ToString(),
                    About = dr["About"].ToString(),

                });
            }
            return lstEmp;
        }
        //Retrieve single record from a table
        public details getData(string Id)
        {
            details emp1 = new details();
            SqlCommand cmd = new SqlCommand("select * from details where id='" + Id +
           "'", con);

            con.Open();
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.HasRows)
            {
                while (dr.Read())
                {
                    emp1.Id = Convert.ToInt32(dr["Id"].ToString());
                    emp1.Email = dr["Email"].ToString();
                    emp1.Phone = Convert.ToInt32(dr["Phone"].ToString());
                    emp1.Address = dr["Address"].ToString();
                    emp1.About = dr["About"].ToString();

                }
            }
            con.Close();
            return emp1;
        }

        public bool insert(details Emp)
        {
            // Assuming "Id" is auto-generated by the database, if not, you need to add it as a parameter.
            string query = "INSERT INTO details (Email, Phone, Address, About) VALUES (@Email, @Phone, @Address, @About)";

            // Use "using" statement for automatic disposal of SqlConnection
            using (SqlConnection con = new SqlConnection(@"Data Source=(LocalDB)\MSSQLLocalDB;Initial Catalog=CauseLink;Integrated Security=True;Connect Timeout=30;Encrypt=False;"))
            {
                // Use "using" statement for SqlCommand to ensure it's disposed properly
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    cmd.Parameters.AddWithValue("@Email", Emp.Email);
                    cmd.Parameters.AddWithValue("@Phone", Emp.Phone);
                    cmd.Parameters.AddWithValue("@Address", Emp.Address);
                    cmd.Parameters.AddWithValue("@About", Emp.About);

                    con.Open(); // Open connection
                    int i = cmd.ExecuteNonQuery(); // Execute the non-query command
                    con.Close(); // Close connection explicitly here because of the return statement below (though using will ensure closure)

                    return i >= 1;
                }
            }


        }
    }
}
